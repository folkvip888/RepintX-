--====================================================
-- UI (Obsidian/Linoria) + Event + Game + Create Room + UI Settings (All-in-One)
--  - Event: Auto Restart @2/2, Auto Hide Rewards UI, Auto Play Swarm Event
--  - Game : Auto Retry / Auto Next / Auto Vote Game / AutoPlay (Bool)
--  - Create Room: Map/Chapter (with Scrolling), Difficulty, FriendOnly, AutoStart
--====================================================

-- libs
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager  = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

-- Window / Tabs
local Window = Library:CreateWindow({
	Title = "RepintX",
	Footer = "version: example",
	Icon = 95816097006870,
	NotifySide = "Right",
	ShowCustomCursor = true,
	AutoShow = true,
})

local Tabs = {
	Game   = Window:AddTab("Game", "gamepad-2"),
	Event  = Window:AddTab("Event", "activity"),
	["Create Room"] = Window:AddTab("Create Room", "plus-square"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local Options, Toggles = Library.Options, Library.Toggles

--====================================================
-- Helpers (safe waits / click / value set)
--====================================================
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local VIM = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local pg = player:WaitForChild("PlayerGui")

local function safeWaitPath(root, path, timeout)
    local node, t0 = root, os.clock()
    for i, name in ipairs(path) do
        local ok, found = pcall(function() return node:WaitForChild(name, 2) end)
        if not ok or not found then
            repeat
                found = node:FindFirstChild(name)
                if found then break end
                task.wait(0.2)
            until (os.clock() - t0) >= (timeout or 10)
        end
        if not found then return nil, ("missing: %s (idx %d)"):format(name, i) end
        node = found
    end
    return node
end

local function clickGuiObject(obj)
    if not obj then return end
    local inset = GuiService:GetGuiInset()
    local center = obj.AbsolutePosition + (obj.AbsoluteSize / 2)
    VIM:SendMouseButtonEvent(center.X, center.Y + inset.Y, 0, true, obj, 0)
    VIM:SendMouseButtonEvent(center.X, center.Y + inset.Y, 0, false, obj, 0)
end

local function setBoolValueSafely(valObj, bool)
	if not valObj then return end
	pcall(function() if valObj.Value ~= nil then valObj.Value = bool end end)
	pcall(function() if valObj.value ~= nil then valObj.value = bool end end)
end

-- Vote remotes
local function getVoteRemote(key)
	-- key: "VoteRetry" | "VoteNext" | "VotePlaying"
	local ok, r = pcall(function()
		return ReplicatedStorage
			:WaitForChild("Remote")
			:WaitForChild("Server")
			:WaitForChild("OnGame")
			:WaitForChild("Voting")
			:WaitForChild(key)
	end)
	return ok and r or nil
end

local function wavesIsTwoOfTwo(wavesLabel)
    local txt = tostring(wavesLabel.Text or "")
    return (txt == "2/2") or (txt:find("2%s*/%s*2") ~= nil)
end

local function spamVote(remoteName, duration, interval)
	duration = duration or 5
	interval = interval or 0.25
	local r = getVoteRemote(remoteName)
	if not r then return end
	local t0 = os.clock()
	while (os.clock() - t0) < duration do
		pcall(function() r:FireServer() end)
		task.wait(interval)
	end
end

--====================================================
-- ===================== EVENT TAB ===================
--====================================================

-- Auto Restart @ 2/2
local AutoGB = Tabs.Event:AddLeftGroupbox("Auto Restart / Vote")

AutoGB:AddToggle("AutoRestartTwoOfTwo", {
    Text = "Auto Restart at 2/2",
    Tooltip = "เจอ 2/2 → เปิด Settings → กด Restart Match → สแปม VoteRetry",
    Default = false,
})

AutoGB:AddSlider("RetryDuration", {
    Text = "Spam Duration (sec)",
    Default = 10, Min = 3, Max = 30, Rounding = 0,
})

AutoGB:AddSlider("RetryInterval", {
    Text = "Spam Interval (sec)",
    Default = 0.25, Min = 0.05, Max = 1.0, Rounding = 2,
})

AutoGB:AddLabel("Hotkey"):AddKeyPicker("AutoRestartKey", {
    Default = "F6",
    Mode = "Toggle",
    Text = "Toggle Auto Restart",
    NoUI = false,
    SyncToggleState = true,
})

Options.AutoRestartKey:OnClick(function()
    Toggles.AutoRestartTwoOfTwo:SetValue(not Toggles.AutoRestartTwoOfTwo.Value)
end)

local AutoRestartState = { running = false, token = 0 }

local function startAutoRestartWatcher()
    if AutoRestartState.running then return end
    AutoRestartState.running = true
    AutoRestartState.token += 1
    local myToken = AutoRestartState.token

    task.spawn(function()
        local wavesLabel = safeWaitPath(pg, {"HUD","InGame","Main","TOP","List","Waves","Numbers"}, 15)
        while AutoRestartState.running and (myToken == AutoRestartState.token) do
            if wavesLabel and wavesIsTwoOfTwo(wavesLabel) then
                -- เปิด Settings
                pcall(function() pg.Settings.Enabled = true end)
                task.wait(0.3)

                -- Restart Match (ไม่ต้องสกรอล์)
                local restartClick = safeWaitPath(
                    pg,
                    {"Settings","Main","Base","Space","ScrollingFrame","Restart Match","Click"},
                    3
                )
                if restartClick then clickGuiObject(restartClick) end

                -- Spam VoteRetry
                spamVote("VoteRetry", Options.RetryDuration.Value, Options.RetryInterval.Value)

                repeat
                    if not (AutoRestartState.running and myToken == AutoRestartState.token) then break end
                    task.wait(0.75)
                until not wavesIsTwoOfTwo(wavesLabel)
            else
                task.wait(0.35)
            end
        end
        if myToken == AutoRestartState.token then
            AutoRestartState.running = false
        end
    end)
end

local function stopAutoRestartWatcher()
    if not AutoRestartState.running then return end
    AutoRestartState.token += 1
    AutoRestartState.running = false
end

Toggles.AutoRestartTwoOfTwo:OnChanged(function()
    if Toggles.AutoRestartTwoOfTwo.Value then
        startAutoRestartWatcher()
        Library:Notify("Auto Restart at 2/2: ON", 3)
    else
        stopAutoRestartWatcher()
        Library:Notify("Auto Restart at 2/2: OFF", 3)
    end
end)
if Toggles.AutoRestartTwoOfTwo.Value then startAutoRestartWatcher() end

-- Auto Hide Rewards UI
local AutoHideGB = Tabs.Event:AddRightGroupbox("Auto Hide")

AutoHideGB:AddToggle("AutoHideRewards", {
    Text = "Auto Hide Rewards UI",
    Tooltip = "ถ้า RewardsUI.Enabled == true จะปิดเป็น false อัตโนมัติ",
    Default = false,
})

local AutoHideState = { running = false, token = 0 }

local function startAutoHideWatcher()
    if AutoHideState.running then return end
    AutoHideState.running = true
    AutoHideState.token += 1
    local myToken = AutoHideState.token

    task.spawn(function()
        local RewardsUI = safeWaitPath(pg, {"RewardsUI"}, 10)
        while AutoHideState.running and (myToken == AutoHideState.token) do
            if RewardsUI and RewardsUI.Enabled == true then
                pcall(function() RewardsUI.Enabled = false end)
            end
            task.wait(0.5)
        end
        if myToken == AutoHideState.token then
            AutoHideState.running = false
        end
    end)
end

local function stopAutoHideWatcher()
    if not AutoHideState.running then return end
    AutoHideState.token += 1
    AutoHideState.running = false
end

Toggles.AutoHideRewards:OnChanged(function()
    if Toggles.AutoHideRewards.Value then
        startAutoHideWatcher(); Library:Notify("Auto Hide Rewards UI: ON", 3)
    else
        stopAutoHideWatcher(); Library:Notify("Auto Hide Rewards UI: OFF", 3)
    end
end)
if Toggles.AutoHideRewards.Value then startAutoHideWatcher() end

-- Auto Play Swarm Event
local PlayGB = Tabs.Event:AddRightGroupbox("Play Event")

PlayGB:AddToggle("AutoPlayEvent", {
    Text = "Auto Play Swarm Event",
    Tooltip = "เปิด HUD > Swarm Event แล้วกด Play อัตโนมัติ",
    Default = false,
})

PlayGB:AddSlider("PlayCooldown", {
    Text = "Cooldown (sec)",
    Default = 3, Min = 1, Max = 15, Rounding = 0,
})

local function tryOpenSwarmEventMenu()
    local openBtn = safeWaitPath(pg, {"HUD","MenuFrame","RightSide","Swarm Event"}, 3)
    if openBtn and openBtn.Visible then
        local clickObj = openBtn:FindFirstChild("Click") or openBtn
        pcall(function() clickGuiObject(clickObj) end)
        return true
    end
    return false
end

local function tryPressSwarmEventPlay()
    local playBtn = safeWaitPath(pg, {"Swarm Event","Main","Tabs","Play"}, 3)
    if playBtn and playBtn.Visible then
        local clickable = playBtn:FindFirstChild("Click") or playBtn
        pcall(function() clickGuiObject(clickable) end)
        return true
    end
    return false
end

local AutoPlayState = { running = false, token = 0, lastTick = 0 }

local function startAutoPlayWatcher()
    if AutoPlayState.running then return end
    AutoPlayState.running = true
    AutoPlayState.token += 1
    local myToken = AutoPlayState.token

    task.spawn(function()
        while AutoPlayState.running and (myToken == AutoPlayState.token) do
            local now = os.clock()
            if now - (AutoPlayState.lastTick or 0) >= (Options.PlayCooldown.Value or 3) then
                local okOpen = tryOpenSwarmEventMenu()
                task.wait(0.25)
                local okPlay = tryPressSwarmEventPlay()
                if okOpen or okPlay then
                    AutoPlayState.lastTick = now
                end
            end
            task.wait(0.5)
        end
        if myToken == AutoPlayState.token then
            AutoPlayState.running = false
        end
    end)
end

local function stopAutoPlayWatcher()
    if not AutoPlayState.running then return end
    AutoPlayState.token += 1
    AutoPlayState.running = false
end

Toggles.AutoPlayEvent:OnChanged(function()
    if Toggles.AutoPlayEvent.Value then
        startAutoPlayWatcher(); Library:Notify("Auto Play Swarm Event: ON", 3)
    else
        stopAutoPlayWatcher(); Library:Notify("Auto Play Swarm Event: OFF", 3)
    end
end)
if Toggles.AutoPlayEvent.Value then startAutoPlayWatcher() end

--====================================================
-- ====================== GAME TAB ===================
--====================================================

local GameGB = Tabs.Game:AddLeftGroupbox("Voting Remotes")

GameGB:AddToggle("AutoRetry", { Text = "Auto Retry", Default = false })
GameGB:AddToggle("AutoNext",  { Text = "Auto Next",  Default = false })
GameGB:AddToggle("AutoVotePlaying", { Text = "Auto Vote Game", Default = false })

GameGB:AddSlider("GameVoteInterval", {
	Text = "Remote Interval (sec)",
	Default = 1.0, Min = 0.1, Max = 5.0, Rounding = 2,
})

local VoteState = {
	Retry = {running=false, token=0},
	Next  = {running=false, token=0},
	Play  = {running=false, token=0},
}

local function startVoteLoop(which, remoteName)
	local state = VoteState[which]
	if state.running then return end
	state.running = true
	state.token += 1
	local myToken = state.token

	task.spawn(function()
		local r = getVoteRemote(remoteName)
		while state.running and (myToken == state.token) do
			if r then pcall(function() r:FireServer() end) end
			task.wait(Options.GameVoteInterval.Value or 1.0)
		end
		if myToken == state.token then state.running = false end
	end)
end

local function stopVoteLoop(which)
	local state = VoteState[which]
	if not state.running then return end
	state.token += 1
	state.running = false
end

Toggles.AutoRetry:OnChanged(function(v)
	if v then startVoteLoop("Retry","VoteRetry") else stopVoteLoop("Retry") end
	Library:Notify(("Auto Retry: %s"):format(v and "ON" or "OFF"), 2)
end)

Toggles.AutoNext:OnChanged(function(v)
	if v then startVoteLoop("Next","VoteNext") else stopVoteLoop("Next") end
	Library:Notify(("Auto Next: %s"):format(v and "ON" or "OFF"), 2)
end)

Toggles.AutoVotePlaying:OnChanged(function(v)
	if v then startVoteLoop("Play","VotePlaying") else stopVoteLoop("Play") end
	Library:Notify(("Auto Vote Game: %s"):format(v and "ON" or "OFF"), 2)
end)

-- AutoPlay Bool
local GameRight = Tabs.Game:AddRightGroupbox("AutoPlay Toggle")

GameRight:AddToggle("AutoPlayBool", {
	Text = "AutoPlay",
	Tooltip = "เปิด true / ปิด false",
	Default = false,
})

local function setAutoPlayBool(enabled)
	local node = safeWaitPath(ReplicatedStorage, {"Player_Data", player.Name, "Data", "AutoPlay"}, 10)
	if node then
		setBoolValueSafely(node, enabled)
		Library:Notify(("AutoPlay set to %s"):format(tostring(enabled)), 3)
	else
		Library:Notify("AutoPlay path not found.", 3)
	end
end

Toggles.AutoPlayBool:OnChanged(function()
	setAutoPlayBool(Toggles.AutoPlayBool.Value)
end)

--====================================================
-- ==================== CREATE ROOM ==================
--   - Map/Chapter Scrolling + Difficulty + FriendOnly + AutoStart
--====================================================

local function findFirstClickable(container)
    if not container then return nil end
    for _, d in ipairs(container:GetDescendants()) do
        if d.Name == "Click" and (d:IsA("TextButton") or d:IsA("ImageButton")) then
            return d
        end
        if d:IsA("TextButton") or d:IsA("ImageButton") then
            return d
        end
    end
    if container:IsA("TextButton") or container:IsA("ImageButton") then
        return container
    end
    return nil
end

local function clickIfExists(pathParts, timeout)
    local node = safeWaitPath(game, pathParts, timeout or 8)
    if not node then return false end
    local btn = findFirstClickable(node)
    if not btn then return false end
    clickGuiObject(btn)
    return true
end

local function scrollIntoViewAndClick(sf, target)
    if not (sf and target and sf:IsA("ScrollingFrame")) then return false end
    local function clamp(n, a, b) if n < a then return a elseif n > b then return b else return n end end
    local yInView = (target.AbsolutePosition.Y - sf.AbsolutePosition.Y) + sf.CanvasPosition.Y
    local desired = yInView - (sf.AbsoluteSize.Y * 0.35)
    local maxY = math.max(0, sf.AbsoluteCanvasSize.Y - sf.AbsoluteSize.Y)
    sf.CanvasPosition = Vector2.new(0, clamp(desired, 0, maxY))
    task.wait(0.06)
    local btn = findFirstClickable(target)
    if btn then clickGuiObject(btn); return true end
    return false
end

local function scrollClickByName(sf, childName)
    if not (sf and childName) then return false end
    local target = sf:FindFirstChild(childName)
    if not target then
        for _, c in ipairs(sf:GetChildren()) do
            if c.Name and c.Name:lower():find(childName:lower(), 1, true) then
                target = c; break
            end
        end
    end
    if not target then return false end
    return scrollIntoViewAndClick(sf, target)
end

local function chapterButtonName(mapKey, chapterNum)
    return ("%s_Chapter%d"):format(mapKey, chapterNum)
end

local CreateCfg = {
    Map = "OnePiece",
    Chapter = 1,
    FriendsOnly = false,
    AutoStart = false,
    Difficulty = "Normal",
}

local MAP_LIST = {
    "Berserk","BizzareRace","ChainsawMan","DBZ2","JojoPart1",
    "Namek","Naruto","OnePiece","OPM","SAO","SoloLeveling",
    "SoulSociety","TokyoGhoul","DemonSlayer"
}

local function getAvailableMaps()
    local maps, seen = {}, {}
    for _, m in ipairs(MAP_LIST) do seen[m] = true; table.insert(maps, m) end
    local sf = safeWaitPath(pg, {"PlayRoom","Main","GameStage","Main","Base","Story","ScrollingFrame"}, 0.8)
    if sf then
        for _, child in ipairs(sf:GetChildren()) do
            if child.Name and child.Name ~= "UIListLayout" and child.Name ~= "UIPadding" then
                if not seen[child.Name] then seen[child.Name]=true; table.insert(maps, child.Name) end
            end
        end
    end
    table.sort(maps)
    return maps
end

local CR_Left  = Tabs["Create Room"]:AddLeftGroupbox("Setup")
local CR_Right = Tabs["Create Room"]:AddRightGroupbox("Actions")

local mapValues = getAvailableMaps()
CR_Left:AddDropdown("CR_Map", {
    Text = "Map (Story)",
    Values = mapValues,
    Default = CreateCfg.Map,
})
Options.CR_Map:OnChanged(function(v) CreateCfg.Map = v end)

CR_Right:AddToggle("AutoPlayEvent", {
    Text = "Auto Play Swarm Event",
    Tooltip = "เปิด HUD > Swarm Event แล้วกด Play อัตโนมัติ",
    Default = false,
})

local chapValues = {}; for i = 1, 10 do chapValues[i] = tostring(i) end
CR_Left:AddDropdown("CR_Chapter", {
    Text = "Chapter",
    Values = chapValues,
    Default = tostring(CreateCfg.Chapter),
})
Options.CR_Chapter:OnChanged(function(v)
    local n = tonumber(v) or 1
    if n < 1 then n = 1 elseif n > 10 then n = 10 end
    CreateCfg.Chapter = n
end)

CR_Left:AddDropdown("CR_Diff", {
    Text = "Difficulty",
    Values = {"Normal","Hard","Nightmare"},
    Default = CreateCfg.Difficulty,
})
Options.CR_Diff:OnChanged(function(v) CreateCfg.Difficulty = v end)

CR_Left:AddToggle("CR_FriendsOnly", { Text = "Friends Only", Default = CreateCfg.FriendsOnly })
Toggles.CR_FriendsOnly:OnChanged(function(v)
    CreateCfg.FriendsOnly = v
    clickIfExists({"Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Misc","FriendOnly"}, 2)
end)

CR_Left:AddToggle("CR_AutoStart", { Text = "Auto Start After Create", Default = CreateCfg.AutoStart })
Toggles.CR_AutoStart:OnChanged(function(v) CreateCfg.AutoStart = v end)

local function doOpenCreatePane()
    clickIfExists({"Players", player.Name, "PlayerGui","HUD","MenuFrame","LeftSide","Frame","PlayRoom"}, 3)
    task.wait(0.15)
    clickIfExists({"Players", player.Name, "PlayerGui","PlayRoom","Main","Button","Create"}, 3)
end

local function selectMapInScroll(mapName)
    local sf = safeWaitPath(pg, {"PlayRoom","Main","GameStage","Main","Base","Story","ScrollingFrame"}, 4)
    if not sf then return false end
    return scrollClickByName(sf, mapName)
end

local function selectChapterInScroll(mapName, chapterNum)
    local basePath = {"PlayRoom","Main","GameStage","Main","Base","Chapter", mapName}
    local chapRoot = safeWaitPath(pg, basePath, 3)
    if not chapRoot then return false end

    local container = chapRoot:FindFirstChild(mapName.."_Chapter1-10")
    if not container then
        local directBtn = chapRoot:FindFirstChild(("%s_Chapter%d"):format(mapName, chapterNum))
        if directBtn then
            local sfParent = chapRoot:FindFirstChildWhichIsA("ScrollingFrame") or chapRoot
            return scrollIntoViewAndClick(sfParent, directBtn)
        end
        return false
    end

    local sf = container:FindFirstChildWhichIsA("ScrollingFrame") or container
    local chapterName = ("%s_Chapter%d"):format(mapName, chapterNum)
    if sf:IsA("ScrollingFrame") then
        return scrollClickByName(sf, chapterName)
    else
        local target = container:FindFirstChild(chapterName)
        if target then
            local btn = findFirstClickable(target)
            if btn then clickGuiObject(btn); return true end
        end
    end
    return false
end

local function selectDifficulty(diffName)
    local path = {"Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","DifficultyButton", diffName}
    local clicked = clickIfExists(path, 2)
    if not clicked then
        local node = safeWaitPath(game, path, 1)
        if node then
            local btn = findFirstClickable(node)
            if btn then clickGuiObject(btn); clicked = true end
        end
    end
    return clicked
end

local function doCreateRoom()
    -- 1) Open create pane
    doOpenCreatePane()
    task.wait(0.15)

    -- 2) Select Map (scrolling)
    selectMapInScroll(CreateCfg.Map)
    task.wait(0.15)

    -- 3) Select Chapter (scrolling since 4+)
    selectChapterInScroll(CreateCfg.Map, CreateCfg.Chapter)
    task.wait(0.12)

    -- 4) Difficulty
    selectDifficulty(CreateCfg.Difficulty)
    task.wait(0.06)

    -- 5) FriendsOnly
    if CreateCfg.FriendsOnly then
        clickIfExists({"Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Misc","FriendOnly"}, 1.0)
        task.wait(0.05)
    end

    -- 6) Create
    clickIfExists({"Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Button","Create"}, 2.5)

    -- 7) AutoStart
    if CreateCfg.AutoStart then
        task.wait(0.35)
        local okStart = clickIfExists({"Players", player.Name, "PlayerGui","PlayRoom","Main","Game_Submit","Button","Start"}, 2.0)
        if not okStart then Library:Notify("Start button not found (กดเองได้)", 3) end
    end
end

CR_Right:AddButton("Open PlayRoom (Create)", function() doOpenCreatePane() end)
CR_Right:AddButton("Create Room Now", function() task.spawn(doCreateRoom) end)

--====================================================
-- UI Settings / Themes / Saves
--====================================================
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")
MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(v) Library.KeybindFrame.Visible = v end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(v) Library.ShowCustomCursor = v end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" }, Default = "Right",
	Text = "Notification Side",
	Callback = function(v) Library:SetNotifySide(v) end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%", Text = "DPI Scale",
	Callback = function(v)
		local n = tonumber(v:gsub("%%",""))
        if n then Library:SetDPIScale(n) end
	end,
})
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

-- Cleanup
Library:OnUnload(function()
	-- Event
	pcall(function() if Toggles.AutoRestartTwoOfTwo and Toggles.AutoRestartTwoOfTwo.Value then end end)
	pcall(function() end)
	-- Game
	pcall(function() end)
	print("[UI] Unloaded.")
end)
