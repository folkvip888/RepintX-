--====================================================
-- RepintX (Obsidian/Linoria) - Event + Game + Create Room + UI Settings + Webhooks
--====================================================

--======================= Libraries =======================
local repo         = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library      = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager  = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

--======================= Window/Tabs ======================
local Window = Library:CreateWindow({
    Title            = "RepintX",
    Footer           = "version: example",
    Icon             = 95816097006870,
    NotifySide       = "Right",
    ShowCustomCursor = true,
    AutoShow         = true,
})

local Tabs = {
    Game            = Window:AddTab("Game", "gamepad-2"),
    Event           = Window:AddTab("Event", "activity"),
    ["Create Room"] = Window:AddTab("Create Room", "plus-square"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
    Webhooks        = Window:AddTab("Webhooks", "link"),
}

local Options, Toggles = Library.Options, Library.Toggles

--======================= Services =========================
local Players           = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService        = game:GetService("GuiService")
local VIM               = game:GetService("VirtualInputManager")
local HttpService       = game:GetService("HttpService")
local StarterGui        = game:GetService("StarterGui")

local player = Players.LocalPlayer
local pg     = player:WaitForChild("PlayerGui")

--======================= Helpers ==========================
local function safeWaitPath(root, path, timeout)
    local node, t0 = root, os.clock()
    for i, name in ipairs(path) do
        local ok, found = pcall(function() return node:WaitForChild(name, 2) end)
        if not ok or not found then
            repeat
                found = node:FindFirstChild(name)
                if found then break end
                task.wait(0.2)
            until (os.clock() - t0) >= (timeout or 10)
        end
        if not found then return nil, ("missing: %s (idx %d)"):format(name, i) end
        node = found
    end
    return node
end

local function findFirstClickable(container)
    if not container then return nil end
    for _, d in ipairs(container:GetDescendants()) do
        if d.Name == "Click" and (d:IsA("TextButton") or d:IsA("ImageButton")) then return d end
        if d:IsA("TextButton") or d:IsA("ImageButton") then return d end
    end
    if container:IsA("TextButton") or container:IsA("ImageButton") then return container end
    return nil
end

local function clickGuiObject(obj)
    if not obj then return end
    local inset  = GuiService:GetGuiInset()
    local center = obj.AbsolutePosition + (obj.AbsoluteSize / 2)
    VIM:SendMouseButtonEvent(center.X, center.Y + inset.Y, 0, true,  obj, 0)
    VIM:SendMouseButtonEvent(center.X, center.Y + inset.Y, 0, false, obj, 0)
end

local function clickIfExists(pathParts, timeout)
    local node = safeWaitPath(game, pathParts, timeout or 8)
    if not node then return false end
    local btn = findFirstClickable(node)
    if not btn then return false end
    clickGuiObject(btn)
    return true
end

local function setBoolValueSafely(valObj, bool)
    if not valObj then return end
    pcall(function() if valObj.Value ~= nil then valObj.Value = bool end end)
    pcall(function() if valObj.value ~= nil then valObj.value = bool end end)
end

local function wavesIsTwoOfTwo(wavesLabel)
    local txt = tostring(wavesLabel.Text or "")
    return (txt == "2/2") or (txt:find("2%s*/%s*2") ~= nil)
end

--======================= Voting Remotes ===================
local function getVoteRemote(key)
    local ok, r = pcall(function()
        return ReplicatedStorage
            :WaitForChild("Remote")
            :WaitForChild("Server")
            :WaitForChild("OnGame")
            :WaitForChild("Voting")
            :WaitForChild(key)
    end)
    return ok and r or nil
end

local function spamVote(remoteName, duration, interval)
    duration = duration or 5
    interval = interval or 0.25
    local r = getVoteRemote(remoteName)
    if not r then return end
    local t0 = os.clock()
    while (os.clock() - t0) < duration do
        pcall(function() r:FireServer() end)
        task.wait(interval)
    end
end

--======================= Stage Select =====================
local STAGE_LIST = { "Story", "Ranger", "Raids", "Infinite" }

local function selectStageMode(mode)
    mode = mode or "Story"
    local node = safeWaitPath(pg, { "PlayRoom","Main","GameStage","Main","Stage_Select", mode }, 3)
    if not node then return false end
    local btn = findFirstClickable(node) or node
    if btn then clickGuiObject(btn); return true end
    return false
end

local function getStageRoots(stage)
    stage = stage or "Story"
    local baseRoot = safeWaitPath(pg, { "PlayRoom","Main","GameStage","Main","Base", stage }, 0.2)
    local selRoot  = safeWaitPath(pg, { "PlayRoom","Main","GameStage","Main","Stage_Select", stage }, 0.2)
    return baseRoot, selRoot
end

local function getMapScrollForStage(stage)
    local baseRoot, selRoot = getStageRoots(stage)
    local function pickSF(root)
        if not root then return nil end
        return root:FindFirstChild("ScrollingFrame") or root:FindFirstChildWhichIsA("ScrollingFrame")
    end
    return pickSF(baseRoot) or pickSF(selRoot)
end

local function getChapterRoot(stage, mapName)
    local root = safeWaitPath(pg, { "PlayRoom","Main","GameStage","Main","Base","Chapter", mapName }, 0.5)
    if root then return root end
    local _, selRoot = getStageRoots(stage)
    if selRoot then
        local ch = selRoot:FindFirstChild("Chapter")
        if ch and ch:FindFirstChild(mapName) then return ch[mapName] end
    end
    local any = safeWaitPath(pg, { "PlayRoom","Main","GameStage","Main" }, 0.2)
    if any then
        local found = any:FindFirstChild("Chapter", true)
        if found and found:FindFirstChild(mapName) then return found[mapName] end
    end
    return nil
end

local function scrollIntoViewAndClick(sf, target)
    if not (sf and target and sf:IsA("ScrollingFrame")) then return false end
    local function clamp(n, a, b) if n < a then return a elseif n > b then return b else return n end end
    local yInView = (target.AbsolutePosition.Y - sf.AbsolutePosition.Y) + sf.CanvasPosition.Y
    local desired = yInView - (sf.AbsoluteSize.Y * 0.35)
    local maxY = math.max(0, sf.AbsoluteCanvasSize.Y - sf.AbsoluteSize.Y)
    sf.CanvasPosition = Vector2.new(0, clamp(desired, 0, maxY)); task.wait(0.06)
    local btn = findFirstClickable(target)
    if btn then clickGuiObject(btn); return true end
    return false
end

local function scrollClickByName(sf, childName)
    if not (sf and childName) then return false end
    local target = sf:FindFirstChild(childName)
    if not target then
        for _, c in ipairs(sf:GetChildren()) do
            if c.Name and c.Name:lower():find(childName:lower(), 1, true) then target = c; break end
        end
    end
    if not target then return false end
    return scrollIntoViewAndClick(sf, target)
end

local function selectMapForStage(stage, mapName)
    local sf = getMapScrollForStage(stage)
    if not sf then return false end
    return scrollClickByName(sf, mapName)
end

local function selectChapterForStage(stage, mapName, chapterNum)
    local chapRoot = getChapterRoot(stage, mapName)
    if not chapRoot then return false end
    local container = chapRoot:FindFirstChild(("%s_Chapter1-10"):format(mapName))
    if container then
        local sf = container:FindFirstChildWhichIsA("ScrollingFrame") or container
        local name = ("%s_Chapter%d"):format(mapName, chapterNum)
        if sf:IsA("ScrollingFrame") then
            return scrollClickByName(sf, name)
        else
            local target = container:FindFirstChild(name)
            if target then
                local btn = findFirstClickable(target)
                if btn then clickGuiObject(btn); return true end
            end
        end
        return false
    else
        local directBtn = chapRoot:FindFirstChild(("%s_Chapter%d"):format(mapName, chapterNum))
        if directBtn then
            local parentSF = chapRoot:FindFirstChildWhichIsA("ScrollingFrame") or chapRoot
            return scrollIntoViewAndClick(parentSF, directBtn)
        end
    end
    return false
end

--====================================================
-- ======================== EVENT TAB =================
--====================================================

-- ---------- Auto Restart / Vote ----------
local AutoGB = Tabs.Event:AddLeftGroupbox("Auto Restart / Vote")
AutoGB:AddToggle("AutoRestartTwoOfTwo", { Text = "Auto Restart at 2/2", Default = false })
AutoGB:AddSlider("RetryDuration", { Text = "Spam Duration (sec)", Default = 10, Min = 3, Max = 30, Rounding = 0 })
AutoGB:AddSlider("RetryInterval", { Text = "Spam Interval (sec)", Default = 0.25, Min = 0.05, Max = 1.0, Rounding = 2 })
AutoGB:AddLabel("Hotkey"):AddKeyPicker("AutoRestartKey", { Default = "F6", Mode = "Toggle", Text = "Toggle Auto Restart", NoUI = false, SyncToggleState = true })
Options.AutoRestartKey:OnClick(function() Toggles.AutoRestartTwoOfTwo:SetValue(not Toggles.AutoRestartTwoOfTwo.Value) end)

local AutoRestartState = { running = false, token = 0 }
local function startAutoRestartWatcher()
    if AutoRestartState.running then return end
    AutoRestartState.running = true
    AutoRestartState.token += 1
    local myToken = AutoRestartState.token
    task.spawn(function()
        local wavesLabel = safeWaitPath(pg, { "HUD","InGame","Main","TOP","List","Waves","Numbers" }, 15)
        while AutoRestartState.running and (myToken == AutoRestartState.token) do
            if wavesLabel and wavesIsTwoOfTwo(wavesLabel) then
                pcall(function() pg.Settings.Enabled = true end)
                task.wait(0.3)
                local restartClick = safeWaitPath(pg, { "Settings","Main","Base","Space","ScrollingFrame","Restart Match","Click" }, 3)
                if restartClick then clickGuiObject(restartClick) end
                spamVote("VoteRetry", Options.RetryDuration.Value, Options.RetryInterval.Value)
                repeat
                    if not (AutoRestartState.running and myToken == AutoRestartState.token) then break end
                    task.wait(0.75)
                until not wavesIsTwoOfTwo(wavesLabel)
            else
                task.wait(0.35)
            end
        end
        if myToken == AutoRestartState.token then AutoRestartState.running = false end
    end)
end
local function stopAutoRestartWatcher() if not AutoRestartState.running then return end AutoRestartState.token += 1 AutoRestartState.running = false end
Toggles.AutoRestartTwoOfTwo:OnChanged(function(v) if v then startAutoRestartWatcher() else stopAutoRestartWatcher() end end)
if Toggles.AutoRestartTwoOfTwo.Value then startAutoRestartWatcher() end

-- ---------- Auto Hide Rewards UI ----------
local AutoHideGB = Tabs.Event:AddRightGroupbox("Auto Hide")
AutoHideGB:AddToggle("AutoHideRewards", { Text = "Auto Hide Rewards UI", Default = false })
local AutoHideState = { running = false, token = 0 }
local function startAutoHideWatcher()
    if AutoHideState.running then return end
    AutoHideState.running = true
    AutoHideState.token += 1
    local myToken = AutoHideState.token
    task.spawn(function()
        local RewardsUI = safeWaitPath(pg, { "RewardsUI" }, 10)
        while AutoHideState.running and (myToken == AutoHideState.token) do
            if RewardsUI and RewardsUI.Enabled == true then pcall(function() RewardsUI.Enabled = false end) end
            task.wait(0.5)
        end
        if myToken == AutoHideState.token then AutoHideState.running = false end
    end)
end
local function stopAutoHideWatcher() if not AutoHideState.running then return end AutoHideState.token += 1 AutoHideState.running = false end
Toggles.AutoHideRewards:OnChanged(function(v) if v then startAutoHideWatcher() else stopAutoHideWatcher() end end)
if Toggles.AutoHideRewards.Value then startAutoHideWatcher() end

-- ---------- Adventure Votes -> Auto Ready to Work ----------
-- (เลือก wave ที่จะ “ออก” ด้วย Dropdown 5/10/15/20/25 + ปุ่ม Confirm)
local AdvVoteGB = Tabs.Event:AddLeftGroupbox("Adventure Votes")

local AdvCfg = { TargetWave = 10 }
local WAVE_CHOICES = { "5", "10", "15", "20", "25" }

AdvVoteGB:AddDropdown("AdvTargetWave", {
    Text = "Target Wave (/25)",
    Values = WAVE_CHOICES,
    Default = tostring(AdvCfg.TargetWave)
})

AdvVoteGB:AddButton("Confirm", function()
    local sel = tonumber(Options.AdvTargetWave.Value) or 10
    if sel < 5 then sel = 5 elseif sel > 25 then sel = 25 end
    AdvCfg.TargetWave = sel
    Library:Notify(("Target set to %d/25"):format(sel), 2)
end)

AdvVoteGB:AddToggle("AdvAutoReady", { Text = "Auto Ready to Work", Default = false })

-- อ่านค่า wave ปัจจุบันจาก HUD: ...Waves.Numbers.Text = "x/25"
local function getCurrentWave()
    local lbl = safeWaitPath(pg, {"HUD","InGame","Main","TOP","List","Waves","Numbers"}, 1)
    if not lbl or not lbl.Text then return 0, 25 end
    local a, b = tostring(lbl.Text):match("(%d+)%s*/%s*(%d+)")
    return tonumber(a) or 0, tonumber(b) or 25
end

-- กดปุ่ม Endure/Evade ใน AdventureContinuePrompt
local function clickAdventureChoice(which) -- "Endure" | "Evade"
    local prompt = pg:FindFirstChild("AdventureContinuePrompt")
    if not (prompt and prompt:IsA("ScreenGui") and prompt.Enabled) then return false end
    local side = safeWaitPath(prompt, {"Main","LeftSide","Button"}, 1)
    if not side then return false end
    local node = side:FindFirstChild(which)
    if not node then return false end
    local btn = findFirstClickable(node) or node
    if not btn then return false end
    clickGuiObject(btn)
    return true
end

local AdvState = { running=false, token=0 }
local function startAdvAuto()
    if AdvState.running then return end
    AdvState.running = true
    AdvState.token += 1
    local my = AdvState.token

    task.spawn(function()
        local prompt = safeWaitPath(pg, {"AdventureContinuePrompt"}, 10)
        -- listener: ตอบทันทีเมื่อ UI เด้งขึ้น
        if prompt then
            prompt:GetPropertyChangedSignal("Enabled"):Connect(function()
                if not AdvState.running or my ~= AdvState.token then return end
                if prompt.Enabled then
                    local cur = getCurrentWave()
                    local target = AdvCfg.TargetWave or 10
                    if cur < target then
                        clickAdventureChoice("Endure")
                    else
                        clickAdventureChoice("Evade")
                    end
                end
            end)
        end
        -- fallback polling
        while AdvState.running and (my == AdvState.token) do
            if prompt and prompt.Enabled then
                local cur = getCurrentWave()
                local target = AdvCfg.TargetWave or 10
                if cur < target then
                    clickAdventureChoice("Endure")
                else
                    clickAdventureChoice("Evade")
                end
                task.wait(0.6)
            else
                task.wait(0.2)
            end
        end
        if my == AdvState.token then AdvState.running = false end
    end)
end
local function stopAdvAuto() if not AdvState.running then return end AdvState.token += 1 AdvState.running=false end
Toggles.AdvAutoReady:OnChanged(function(v) if v then startAdvAuto() else stopAdvAuto() end end)

-- ---------- Auto Join Modes ----------
local JoinGB = Tabs.Event:AddRightGroupbox("Auto Join Modes")
JoinGB:AddToggle("EVT_AutoJoinSwarm",      { Text = "Auto Join: Swarm Event",      Default = false })
JoinGB:AddToggle("EVT_AutoJoinAdventure",  { Text = "Auto Join: Adventure Gamemode",Default = false })
JoinGB:AddToggle("EVT_AutoJoinExpedition", { Text = "Auto Join: Expedition Mode",  Default = false })
JoinGB:AddSlider("EVT_JoinCooldown", { Text = "Join Cooldown (sec)", Default = 3, Min = 1, Max = 15, Rounding = 0 })

local function tryOpenSwarmEventMenu()
    local openBtn = safeWaitPath(pg, { "HUD","MenuFrame","RightSide","Swarm Event" }, 3)
    if openBtn and openBtn.Visible then local clickObj = openBtn:FindFirstChild("Click") or openBtn; pcall(function() clickGuiObject(clickObj) end); return true end
    return false
end
local function tryPressSwarmEventPlay()
    local playBtn = safeWaitPath(pg, { "Swarm Event","Main","Tabs","Play" }, 3)
    if playBtn and playBtn.Visible then local clickable = playBtn:FindFirstChild("Click") or playBtn; pcall(function() clickGuiObject(clickable) end); return true end
    return false
end
local function tryOpenAdventureGamemode()
    local adv = pg:FindFirstChild("Adventure Gamemode") or select(1, safeWaitPath(pg, { "Adventure Gamemode" }, 2))
    if adv and adv:IsA("ScreenGui") then pcall(function() adv.Enabled = true end); return true end
    return false
end
local function tryPressAdventurePlay()
    local btn = safeWaitPath(pg, { "Adventure Gamemode","Main","Base","Button","Play" }, 3)
    if not btn then return false end
    local clickObj = findFirstClickable(btn) or btn; if clickObj then pcall(function() clickGuiObject(clickObj) end) return true end
    return false
end
local function tryPlayroomStart()
    return clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","Game_Submit","Button","Start" }, 2.0)
end
local function tryOpenExpeditionMode()
    local exp = pg:FindFirstChild("Expedition Mode") or select(1, safeWaitPath(pg, { "Expedition Mode" }, 2))
    if exp and exp:IsA("ScreenGui") then pcall(function() exp.Enabled = true end); return true end
    return false
end
local function tryPressExpeditionPlay()
    local btn = safeWaitPath(pg, { "Expedition Mode","Main","Base","Button","Play" }, 3)
    if not btn then return false end
    local clickObj = findFirstClickable(btn) or btn; if clickObj then pcall(function() clickGuiObject(clickObj) end) return true end
    return false
end

local EVT_JoinState = {
    swarm = {running=false, token=0, last=0},
    adv   = {running=false, token=0, last=0},
    exp   = {running=false, token=0, last=0},
}
local function startSwarmJoin()
    local s = EVT_JoinState.swarm
    if s.running then return end
    s.running = true; s.token += 1
    local my = s.token
    task.spawn(function()
        while s.running and (my == s.token) do
            local now = os.clock()
            if now - (s.last or 0) >= (Options.EVT_JoinCooldown.Value or 3) then
                local okOpen = tryOpenSwarmEventMenu(); task.wait(0.2)
                local okPlay = tryPressSwarmEventPlay()
                if okOpen or okPlay then s.last = now end
            end
            task.wait(0.4)
        end
        if my == s.token then s.running = false end
    end)
end
local function stopSwarmJoin() local s=EVT_JoinState.swarm; if not s.running then return end s.token+=1; s.running=false end

local function startAdventureJoin()
    local s = EVT_JoinState.adv
    if s.running then return end
    s.running = true; s.token += 1
    local my = s.token
    task.spawn(function()
        while s.running and (my == s.token) do
            local now = os.clock()
            if now - (s.last or 0) >= (Options.EVT_JoinCooldown.Value or 3) then
                local okOpen = tryOpenAdventureGamemode(); task.wait(0.2)
                local okPlay = tryPressAdventurePlay(); task.wait(0.2)
                if okOpen or okPlay then tryPlayroomStart(); s.last = now end
            end
            task.wait(0.4)
        end
        if my == s.token then s.running = false end
    end)
end
local function stopAdventureJoin() local s=EVT_JoinState.adv; if not s.running then return end s.token+=1; s.running=false end

local function startExpeditionJoin()
    local s = EVT_JoinState.exp
    if s.running then return end
    s.running = true; s.token += 1
    local my = s.token
    task.spawn(function()
        while s.running and (my == s.token) do
            local now = os.clock()
            if now - (s.last or 0) >= (Options.EVT_JoinCooldown.Value or 3) then
                local okOpen = tryOpenExpeditionMode(); task.wait(0.5)
                local okPlay = tryPressExpeditionPlay(); task.wait(0.3)
                tryPlayroomStart()
                if okOpen or okPlay then s.last = now end
            end
            task.wait(0.4)
        end
        if my == s.token then s.running = false end
    end)
end
local function stopExpeditionJoin() local s=EVT_JoinState.exp; if not s.running then return end s.token+=1; s.running=false end

Toggles.EVT_AutoJoinSwarm:OnChanged(function(v) if v then startSwarmJoin() else stopSwarmJoin() end end)
Toggles.EVT_AutoJoinAdventure:OnChanged(function(v) if v then startAdventureJoin() else stopAdventureJoin() end end)
Toggles.EVT_AutoJoinExpedition:OnChanged(function(v) if v then startExpeditionJoin() else stopExpeditionJoin() end end)

--====================================================
-- ========================= GAME TAB =================
--====================================================
local GameGB = Tabs.Game:AddLeftGroupbox("Voting Remotes")
GameGB:AddToggle("AutoRetry", { Text = "Auto Retry", Default = false })
GameGB:AddToggle("AutoNext",  { Text = "Auto Next",  Default = false })
GameGB:AddToggle("AutoVotePlaying", { Text = "Auto Vote Game", Default = false })
GameGB:AddSlider("GameVoteInterval", { Text = "Remote Interval (sec)", Default = 1.0, Min = 0.1, Max = 5.0, Rounding = 2 })

local VoteState = {
    Retry = {running=false, token=0},
    Next  = {running=false, token=0},
    Play  = {running=false, token=0},
}
local function startVoteLoop(which, remoteName)
    local state = VoteState[which]
    if state.running then return end
    state.running = true; state.token += 1
    local myToken = state.token
    task.spawn(function()
        local r = getVoteRemote(remoteName)
        while state.running and (myToken == state.token) do
            if r then pcall(function() r:FireServer() end) end
            task.wait(Options.GameVoteInterval.Value or 1.0)
        end
        if myToken == state.token then state.running = false end
    end)
end
local function stopVoteLoop(which) local s=VoteState[which]; if not s.running then return end s.token+=1; s.running=false end
Toggles.AutoRetry:OnChanged(function(v) if v then startVoteLoop("Retry","VoteRetry") else stopVoteLoop("Retry") end end)
Toggles.AutoNext:OnChanged(function(v) if v then startVoteLoop("Next","VoteNext") else stopVoteLoop("Next") end end)
Toggles.AutoVotePlaying:OnChanged(function(v) if v then startVoteLoop("Play","VotePlaying") else stopVoteLoop("Play") end end)

local GameRight = Tabs.Game:AddRightGroupbox("AutoPlay & Codes")
GameRight:AddToggle("AutoPlayBool", { Text = "AutoPlay", Default = false })
local function setAutoPlayBool(enabled)
    local node = safeWaitPath(ReplicatedStorage, { "Player_Data", player.Name, "Data", "AutoPlay" }, 10)
    if node then setBoolValueSafely(node, enabled) Library:Notify(("AutoPlay set to %s"):format(tostring(enabled)), 3)
    else Library:Notify("AutoPlay path not found.", 3) end
end
Toggles.AutoPlayBool:OnChanged(function() setAutoPlayBool(Toggles.AutoPlayBool.Value) end)

local ALL_CODES = {
    "NewGearMode?!","SneakyUpdate!","First6.7Update!","CyclopsSoulMine!","CelestialMageOp67","FairyPatch67","ReallySorry4Delay","FallPart2!?!","Sorry6.5UpdateIsReal!!!","FairyTalePeak!","Sorry4Delay","FollowUpTheInsta!","SorryForPassiveDelay!","FixPatchSJW!","SoloPeakLeveling!","NewRaidAndEvos?!","IgrisIsMetaAgain!!","SorryForAllTheIssues!","PityOnRanger?!","TYFORTHESUPPORT!?","FallEvent?!","SorryForLate!","NewRangerUnit!","NewCode!?","BerserkUpdate?!","NewDivineTrials!","MinstaGroupOnTop!","Weloveroblox!","Shutdown2!","UpgradeInFieldFix!","DBZUpdate!","NewPortals?!","GTBossEvent!!","SorryForDelayz!","LBreset!","SECRETCODE!","RiftMode!","SAOUpd!","Dungeons!","MinorChanges!","EzSoulFrags","CraftingFix!","SmartRejoin","ChainsawUpd!","GraveyardRaid!","StatBoosters!","S3Battlepass!","SuperSuperSorry!","3xALLMODES!!","YOUTUBEBACK!!","TYBW2!","QOL2!","ARXBLEACH!","Srry4Shutdown","SmallFixs","!BrandonTheBest","!FixBossRushShop","!TYBW","!MattLovesARX2","!RaitoLovesARX","QuickFix!!","MoreFixs","Sorry4AutoTraitRoll","Sorry4EvoUnits","SorryDelay!!!","SummerEvent!","2xWeekEnd!","Sorry4Quest","SorryRaids","RAIDS","BizzareUpdate2!","Sorry4Delays","HBDTanny","JoJo Part 1","NewLobby","Instant Trait","CODEISREAL","ragebait","PortalsFix","UPDATE 1.5","THANKYOU4PATIENCE","FreeCyclopsSoul","SorryForShutdownBlameZaru"
}
GameRight:AddButton("Redeem All Codes", function()
    task.spawn(function()
        local remote = safeWaitPath(ReplicatedStorage, { "Remote","Server","Lobby","Code" }, 10)
        if not remote then Library:Notify("Code Remote not found", 3); return end
        local okCount, failCount = 0, 0
        for _, code in ipairs(ALL_CODES) do
            local ok = pcall(function() remote:FireServer(code) end)
            if ok then okCount += 1 else failCount += 1 end
            task.wait(0.35)
        end
        Library:Notify(("Redeem Done! OK:%d Fail:%d"):format(okCount, failCount), 4)
    end)
end)

-- Gamepasses & Speed
local function getGamepassNode(passName) return safeWaitPath(ReplicatedStorage, { "Player_Data", player.Name, "Gamepass", passName }, 8) end
local function ensureGamepassTrue(passName) local node = getGamepassNode(passName) if node then setBoolValueSafely(node, true); return true end return false end
local function press3xSpeed()
    local btnParent = safeWaitPath(game, { "Players", player.Name, "PlayerGui","SetSpeed","GameSpeed","framebase","buttons" }, 3)
    if not btnParent then return false end
    local node = btnParent:FindFirstChild("3x") or btnParent:FindFirstChildWhichIsA("TextButton")
    if not node then return false end
    local btn = findFirstClickable(node) or node
    if btn then clickGuiObject(btn); return true end
    return false
end

local GamePassGB = Tabs.Game:AddRightGroupbox("Gamepasses & Speed")
GamePassGB:AddToggle("UseAutoTraitReroll", { Text = "Use Auto Trait Reroll", Default = false })
GamePassGB:AddToggle("Use3xGameSpeed",    { Text = "Use 3x Game Speed",    Default = false })
GamePassGB:AddSlider("GamepassEnforceInterval", { Text = "Enforce Interval (sec)", Default = 5, Min = 1, Max = 30, Rounding = 0 })

local GPState = { reroll = { running=false, token=0 }, speed = { running=false, token=0 } }
local function startRerollWatcher()
    local s = GPState.reroll
    if s.running then return end
    s.running = true; s.token += 1
    local my = s.token
    task.spawn(function()
        while s.running and (my == s.token) do
            ensureGamepassTrue("Auto Trait Reroll")
            task.wait(Options.GamepassEnforceInterval.Value or 5)
        end
        if my == s.token then s.running = false end
    end)
end
local function stopRerollWatcher() local s=GPState.reroll; if not s.running then return end s.token+=1; s.running=false end

local function startSpeedWatcher()
    local s = GPState.speed
    if s.running then return end
    s.running = true; s.token += 1
    local my = s.token
    task.spawn(function()
        while s.running and (my == s.token) do
            ensureGamepassTrue("3x Game Speed")
            task.wait(0.5)
            press3xSpeed()
            task.wait(Options.GamepassEnforceInterval.Value or 5)
        end
        if my == s.token then s.running = false end
    end)
end
local function stopSpeedWatcher() local s=GPState.speed; if not s.running then return end s.token+=1; s.running=false end

Toggles.UseAutoTraitReroll:OnChanged(function(v) if v then startRerollWatcher() else stopRerollWatcher() end end)
Toggles.Use3xGameSpeed:OnChanged(function(v) if v then startSpeedWatcher() else stopSpeedWatcher() end end)

--====================================================
-- ===================== CREATE ROOM ==================
--====================================================
local CreateCfg = { Stage="Story", Map="OnePiece", Chapter=1, FriendsOnly=false, AutoStart=false, Difficulty="Normal" }
local MAP_LIST = { "Berserk","BizzareRace","ChainsawMan","DBZ2","JojoPart1","Namek","Naruto","OnePiece","OPM","SAO","SoloLeveling","SoulSociety","TokyoGhoul","DemonSlayer" }

local function getAvailableMaps(stage)
    stage = stage or "Story"
    local maps, seen = {}, {}
    for _, m in ipairs(MAP_LIST) do seen[m]=true; table.insert(maps, m) end
    local sf = getMapScrollForStage(stage)
    if sf then
        for _, child in ipairs(sf:GetChildren()) do
            if child.Name and child.Name ~= "UIListLayout" and child.Name ~= "UIPadding" then
                if not seen[child.Name] then seen[child.Name]=true; table.insert(maps, child.Name) end
            end
        end
    end
    table.sort(maps); return maps
end

local CR_Left  = Tabs["Create Room"]:AddLeftGroupbox("Setup")
local CR_Right = Tabs["Create Room"]:AddRightGroupbox("Actions")

CR_Left:AddDropdown("CR_Stage", { Text = "Stage", Values = STAGE_LIST, Default = CreateCfg.Stage })
Options.CR_Stage:OnChanged(function(v) CreateCfg.Stage = v end)

local function refreshMapDropdown()
    local vals = getAvailableMaps(CreateCfg.Stage)
    if Options.CR_Map and Options.CR_Map.SetValues then
        Options.CR_Map:SetValues(vals)
        local exists = false
        for _, n in ipairs(vals) do if n == CreateCfg.Map then exists = true break end end
        if not exists then
            CreateCfg.Map = vals[1] or "OnePiece"
            if Options.CR_Map.SetValue then Options.CR_Map:SetValue(CreateCfg.Map) end
        end
    end
end

local mapValues = getAvailableMaps(CreateCfg.Stage)
CR_Left:AddDropdown("CR_Map", { Text = "Map", Values = mapValues, Default = CreateCfg.Map })
Options.CR_Map:OnChanged(function(v) CreateCfg.Map = v end)
Options.CR_Stage:OnChanged(function() task.defer(refreshMapDropdown) end)

local chapValues = {}; for i=1,10 do chapValues[i]=tostring(i) end
CR_Left:AddDropdown("CR_Chapter", { Text = "Chapter", Values = chapValues, Default = tostring(CreateCfg.Chapter) })
Options.CR_Chapter:OnChanged(function(v) local n=tonumber(v) or 1 if n<1 then n=1 elseif n>10 then n=10 end CreateCfg.Chapter=n end)

CR_Left:AddDropdown("CR_Diff", { Text = "Difficulty", Values = {"Normal","Hard","Nightmare"}, Default = CreateCfg.Difficulty })
Options.CR_Diff:OnChanged(function(v) CreateCfg.Difficulty = v end)

CR_Left:AddToggle("CR_FriendsOnly", { Text = "Friends Only", Default = CreateCfg.FriendsOnly })
Toggles.CR_FriendsOnly:OnChanged(function(v)
    CreateCfg.FriendsOnly = v
    clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Misc","FriendOnly" }, 2)
end)

CR_Left:AddToggle("CR_AutoStart", { Text = "Auto Start After Create", Default = CreateCfg.AutoStart })
Toggles.CR_AutoStart:OnChanged(function(v) CreateCfg.AutoStart = v end)

local function doOpenCreatePane()
    clickIfExists({ "Players", player.Name, "PlayerGui","HUD","MenuFrame","LeftSide","Frame","PlayRoom" }, 3)
    task.wait(0.15)
    clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","Button","Create" }, 3)
end
local function selectDifficulty(diffName)
    local path = { "Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","DifficultyButton", diffName }
    local clicked = clickIfExists(path, 2)
    if not clicked then
        local node = safeWaitPath(game, path, 1)
        if node then local btn = findFirstClickable(node); if btn then clickGuiObject(btn); clicked=true end end
    end
    return clicked
end
local function doCreateRoom()
    doOpenCreatePane(); task.wait(0.15)
    selectStageMode(CreateCfg.Stage);                       task.wait(0.12)
    selectMapForStage(CreateCfg.Stage, CreateCfg.Map);      task.wait(0.12)
    selectChapterForStage(CreateCfg.Stage, CreateCfg.Map, CreateCfg.Chapter); task.wait(0.10)
    selectDifficulty(CreateCfg.Difficulty);                 task.wait(0.06)
    if CreateCfg.FriendsOnly then
        clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Misc","FriendOnly" }, 1.0)
        task.wait(0.05)
    end
    clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","GameStage","Main","Base","Button","Create" }, 2.5)
    if CreateCfg.AutoStart then
        task.wait(0.35)
        local okStart = clickIfExists({ "Players", player.Name, "PlayerGui","PlayRoom","Main","Game_Submit","Button","Start" }, 2.0)
        if not okStart then Library:Notify("Start button not found (กดเองได้)", 3) end
    end
end
CR_Right:AddButton("Open PlayRoom (Create)", function() doOpenCreatePane() end)
CR_Right:AddButton("Create Room Now", function() task.spawn(doCreateRoom) end)

--====================================================
-- ======================= WEBHOOKS TAB =======================
--====================================================
local WH_Left  = Tabs.Webhooks:AddLeftGroupbox("Settings")
local WH_Right = Tabs.Webhooks:AddRightGroupbox("Actions")

local DEFAULT_WEBHOOK = ""
WH_Left:AddInput("WebhookURL", {
    Text        = "Discord Webhook URL",
    Default     = DEFAULT_WEBHOOK,
    Placeholder = "https://discord.com/api/webhooks/...",
    Numeric     = false,
    Finished    = true,
    Tooltip     = "วางลิงก์ Webhook ของ Discord",
})

local function currentWebhook()
    local url = Options.WebhookURL and Options.WebhookURL.Value or ""
    return url
end

-- ปุ่ม Test Webhooks: ใช้ค่าจริง Name / Map / PlaceId
local function buildCustomTestPayload()
    local playerName = Players.LocalPlayer and Players.LocalPlayer.Name or "N/A"
    local mapLabel   = safeWaitPath(pg, {"HUD","InGame","Main","GameInfo","Gamemode","Label"}, 1)
    local mapName    = (mapLabel and mapLabel.Text and mapLabel.Text ~= "") and mapLabel.Text or "N/A"
    local placeId    = tostring(game.PlaceId or "N/A")

    local payload = {
        username   = "RepintX",
        avatar_url = "https://media.discordapp.net/attachments/1412823986869637272/1415317557522595921/ChatGPT_Image_10_.._2568_19_15_59.png?format=webp&quality=lossless",
        embeds = {{
            title       = " <:Wave:1410385170028167299>  **Test Webhooks**",
            color       = 13576024,
            description =
                " <:Activate:959384160127049798>  **_Ready to use_**\n" ..
                "<:MMM130:1146649599101120513>  **Name** : **" .. playerName .. "**\n" ..
                "<:MMM138:1146649623738466384>  **Game** : **" .. mapName .. "**\n" ..
                "<:MMM111:1146649536408850442>  **PlaceID** : **" .. placeId .. "**\n",
            thumbnail = { url = "" },
            fields    = {}
        }}
    }
    return HttpService:JSONEncode(payload)
end

WH_Right:AddButton("Test Webhooks", function()
    local url = currentWebhook()
    if url == "" then Library:Notify("กรุณาใส่ Webhook URL ก่อน", 3); return end

    local req = (syn and syn.request) or (http and http.request) or http_request or request or HttpPost
    if not req then Library:Notify("ไม่พบฟังก์ชัน request ของ executor", 3); return end

    local body = buildCustomTestPayload()
    local ok, res = pcall(function()
        return req({ Url = url, Body = body, Method = "POST", Headers = { ["Content-Type"] = "application/json" } })
    end)
    if ok then Library:Notify("ส่ง Test Webhook แล้ว ✅", 3) else Library:Notify("ส่ง Webhook ไม่สำเร็จ ❌ (ดู Output)", 4); warn("[TestWebhook] Error:", res) end
end)

-- Toggle: Auto Webhook on Match End (ปกติ)
WH_Left:AddToggle("AutoMatchWebhook", { Text = "Enable Auto Webhook on Match End", Default = false })

-- รวบรวมข้อมูล & ส่ง Match Webhook
local function readNumberFromValue(obj) local ok,val=pcall(function() return obj.Value end); if ok and val~=nil then return val end; return 0 end
local RewardsUI        = safeWaitPath(pg, {"RewardsUI"})
local GameRunningValue = safeWaitPath(ReplicatedStorage, {"Values","Game","GameRunning"})
local pdataRoot        = safeWaitPath(ReplicatedStorage, {"Player_Data", player.Name, "Data"})
local leaderstats      = safeWaitPath(player, {"leaderstats"})
local TotalTimeLabel   = safeWaitPath(pg, {"RewardsUI","Main","LeftSide","TotalTime"})
local RewardsList      = safeWaitPath(pg, {"RewardsUI","Main","LeftSide","Rewards","ItemsList"})
local MapLabel         = safeWaitPath(pg, {"HUD","InGame","Main","GameInfo","Gamemode","Label"})

local function getGoldGemLevel()
    if not pdataRoot then return 0,0,0 end
    local Gold  = safeWaitPath(pdataRoot, {"Gold"})
    local Gem   = safeWaitPath(pdataRoot, {"Gem"})
    local Level = safeWaitPath(pdataRoot, {"Level"})
    return readNumberFromValue(Gold), readNumberFromValue(Gem), readNumberFromValue(Level)
end
local function getDamage() if not leaderstats then return 0 end local td=leaderstats:FindFirstChild("Total Damage"); return td and readNumberFromValue(td) or 0 end
local function getMap() return MapLabel and MapLabel.Text or "N/A" end
local function getTotalTime() return TotalTimeLabel and TotalTimeLabel.Text or "N/A" end
local function collectRewards()
    local list = {}
    if not RewardsList then return list end
    for _, child in ipairs(RewardsList:GetChildren()) do
        if child.ClassName ~= "UICorner" and child.ClassName ~= "UIGridLayout" and child.ClassName ~= "UIListLayout" then
            local rewardName, rewardAmount
            local textLabels = {}
            for _, d in ipairs(child:GetDescendants()) do if d:IsA("TextLabel") then table.insert(textLabels, d) end end
            if #textLabels > 0 then
                for _, tl in ipairs(textLabels) do
                    local clean = tl.Text:gsub("[^%d]", "")
                    if clean ~= "" then
                        rewardAmount = tonumber(clean)
                        for _, tl2 in ipairs(textLabels) do if tl2 ~= tl and (tl2.Text or "") ~= "" then rewardName = tl2.Text; break end end
                        break
                    end
                end
                if not rewardName then rewardName = textLabels[1].Text or child.Name end
            else rewardName = child.Name end
            table.insert(list, { name = tostring(rewardName or child.Name or "Unknown"), amount = rewardAmount or 1 })
        end
    end
    return list
end
local function formatRewardsBlock(rewards)
    if #rewards == 0 then return "+ (No Rewards)" end
    local lines = {}
    for _, r in ipairs(rewards) do table.insert(lines, string.format("+ [%s] %s", tostring(r.amount), tostring(r.name))) end
    return table.concat(lines, "\n")
end
local function buildMatchPayload()
    local Gold, Gem, Level = getGoldGemLevel()
    local Damage   = getDamage()
    local map      = getMap()
    local timeText = getTotalTime()
    local rewards  = collectRewards()
    local embedDesc = string.format(
        "<:sremovebgpreview:1417467741102669875> **Name** : **||%s||**\n <:imageremovebgpreview3:1417471735217000448> **Level** : **%d**\n\n" ..
        "<:ChatGPT_Image_16_:1417496043943366777> **Result x ข้อมูลที่เล่น**\n```\n+ %s\n+ %s\n+ %s\n```\n" ..
        "<:ChatGPT_Image_16_:1417499092086554684> **Rewards x รางวัลที่ได้**\n```\n%s\n```",
        player.Name, tonumber(Level) or 0, tostring(map), tostring(timeText), tostring(Damage), formatRewardsBlock(rewards)
    )
    local payload = {
        content   = "***Game Ended***",
        embeds    = {{
            title       = "***Anime Rangers X***",
            description = embedDesc,
            color       = 191364,
            fields      = {
                { name = " <:Gem:1361906296823222336> **Gem**",  value = tostring(Gem),  inline = true },
                { name = "<:Gold:1361906308214947880> **Gold**", value = tostring(Gold), inline = true },
            }
        }},
        username   = "RepintX",
        avatar_url = "https://cdn.discordapp.com/attachments/1412823986869637272/1415317557522595921/ChatGPT_Image_10_.._2568_19_15_59.png",
        attachments = {}
    }
    return HttpService:JSONEncode(payload)
end

local function matchEnded()
    local rewardsOn = RewardsUI and RewardsUI.Enabled == true
    local running   = GameRunningValue and GameRunningValue.Value == true
    return rewardsOn and (not running)
end

local WH_State = { running=false, token=0, sentThisRound=false }
local function sendMatchWebhook()
    local req = (syn and syn.request) or (http and http.request) or http_request or request or HttpPost
    if not req then warn("[Webhook] No HTTP request function available."); return end
    local url = currentWebhook(); if not url or url == "" then warn("[Webhook] Empty URL"); return end
    local body = buildMatchPayload()
    pcall(function() req({ Url = url, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = body }) end)
end
local function startWebhookWatcher()
    if WH_State.running then return end
    WH_State.running = true; WH_State.token += 1
    local my = WH_State.token
    task.spawn(function()
        if RewardsUI then
            RewardsUI:GetPropertyChangedSignal("Enabled"):Connect(function()
                if not WH_State.running or my ~= WH_State.token then return end
                if matchEnded() and not WH_State.sentThisRound then WH_State.sentThisRound = true; sendMatchWebhook() end
            end)
        end
        if GameRunningValue then
            GameRunningValue:GetPropertyChangedSignal("Value"):Connect(function()
                if not WH_State.running or my ~= WH_State.token then return end
                if GameRunningValue.Value == true then WH_State.sentThisRound = false end
                if matchEnded() and not WH_State.sentThisRound then WH_State.sentThisRound = true; sendMatchWebhook() end
            end)
        end
        while WH_State.running and (my == WH_State.token) do
            if matchEnded() and not WH_State.sentThisRound then WH_State.sentThisRound = true; sendMatchWebhook() end
            task.wait(0.5)
        end
        if my == WH_State.token then WH_State.running = false end
    end)
end
local function stopWebhookWatcher() if not WH_State.running then return end WH_State.token += 1; WH_State.running = false end
Toggles.AutoMatchWebhook:OnChanged(function(v) if v then startWebhookWatcher() else stopWebhookWatcher() end end)

--================= Auto Webhooks Adventure Mods (แยก) =================
WH_Left:AddToggle("AutoMatchWebhook_Adventure", {
    Text = "Auto Webhooks Adventure Mods",
    Default = false
})

local SG_RewardsUI = safeWaitPath(StarterGui, {"RewardsUI"}, 5)
local function advMatchEnded()
    -- เช็คเฉพาะ StarterGui.RewardsUI.Enabled = true
    return SG_RewardsUI and SG_RewardsUI.Enabled == true
end

local ADV_WH_State = { running=false, token=0, sentThisRound=false }
local function startAdventureWebhookWatcher()
    if ADV_WH_State.running then return end
    ADV_WH_State.running = true; ADV_WH_State.token += 1
    local my = ADV_WH_State.token
    task.spawn(function()
        if SG_RewardsUI then
            SG_RewardsUI:GetPropertyChangedSignal("Enabled"):Connect(function()
                if not ADV_WH_State.running or my ~= ADV_WH_State.token then return end
                if advMatchEnded() and not ADV_WH_State.sentThisRound then
                    ADV_WH_State.sentThisRound = true
                    sendMatchWebhook()
                end
            end)
        end
        while ADV_WH_State.running and (my == ADV_WH_State.token) do
            if advMatchEnded() and not ADV_WH_State.sentThisRound then
                ADV_WH_State.sentThisRound = true
                sendMatchWebhook()
            end
            -- รีเซ็ตเมื่อ UI ปิด
            if SG_RewardsUI and SG_RewardsUI.Enabled == false then
                ADV_WH_State.sentThisRound = false
            end
            task.wait(0.5)
        end
        if my == ADV_WH_State.token then ADV_WH_State.running = false end
    end)
end
local function stopAdventureWebhookWatcher()
    if not ADV_WH_State.running then return end
    ADV_WH_State.token += 1
    ADV_WH_State.running = false
end
Toggles.AutoMatchWebhook_Adventure:OnChanged(function(v)
    if v then startAdventureWebhookWatcher() else stopAdventureWebhookWatcher() end
end)

--====================================================
-- UI Settings / Themes / Saves
--====================================================
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")
MenuGroup:AddToggle("KeybindMenuOpen", { Default = Library.KeybindFrame.Visible, Text = "Open Keybind Menu", Callback = function(v) Library.KeybindFrame.Visible = v end })
MenuGroup:AddToggle("ShowCustomCursor", { Text = "Custom Cursor", Default = true, Callback = function(v) Library.ShowCustomCursor = v end })
MenuGroup:AddDropdown("NotificationSide", { Values = { "Left", "Right" }, Default = "Right", Text = "Notification Side", Callback = function(v) Library:SetNotifySide(v) end })
MenuGroup:AddDropdown("DPIDropdown", { Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" }, Default = "100%", Text = "DPI Scale",
    Callback = function(v) local n = tonumber(v:gsub("%%","")); if n then Library:SetDPIScale(n) end end })
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind", "WebhookURL" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

Library:OnUnload(function() print("[UI] Unloaded.") end)
