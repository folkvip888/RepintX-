--=====================================================
-- =============  LOAD & CREATE WINDOW  ===============
--=====================================================
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/x2zu/OPEN-SOURCE-UI-ROBLOX/refs/heads/main/X2ZU%20UI%20ROBLOX%20OPEN%20SOURCE/DummyUi-leak-by-x2zu/fetching-main/Tools/Framework.luau"
))()

local Window = Library:Window({
    Title = "RepintX - Anime Rangers X ",
    Desc = "",
    Icon = 105059922903197,
    Theme = "Dark",
    Config = { Keybind = Enum.KeyCode.LeftControl, Size = UDim2.new(0, 540, 0, 440) },
    CloseUIButton = { Enabled = true, Text = "Close" }
})

do -- optional sidebar line
    local SidebarLine = Instance.new("Frame")
    SidebarLine.Size = UDim2.new(0, 1, 1, 0)
    SidebarLine.Position = UDim2.new(0, 140, 0, 0)
    SidebarLine.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    SidebarLine.BorderSizePixel = 0
    SidebarLine.ZIndex = 5
    SidebarLine.Name = "SidebarLine"
    SidebarLine.Parent = game:GetService("CoreGui")
end

--=====================================================
-- ==================  SHARED REFS  ===================
--=====================================================
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

-- Remotes
local Rmt       = RS:WaitForChild("Remote")
local R_Server  = Rmt:WaitForChild("Server")
local R_OnGame  = R_Server:WaitForChild("OnGame")
local R_Voting  = R_OnGame:WaitForChild("Voting")
local R_Units   = R_Server:WaitForChild("Units")

--=====================================================
-- ===================  CONFIG LAYER  =================
--=====================================================
local DEFAULT_CFG = {
    ["AutoPlay"]             = false,
    ["Auto Vote Start Game"] = false,
    ["Auto Upgrade"]         = false,
    ["Auto Vote Next"]       = false,
    ["Auto Replay"]          = false,
    ["Auto Leave"]           = false,
    ["Player Only"]          = false,
    ["Speed Gamepass Tier"]  = 1,
    ["Auto Use Speed"]       = false,
    ["Webhook URL"]          = "",
}
do
    local user = rawget(_G, "TekkitConfig") or {}
    for k, v in pairs(DEFAULT_CFG) do
        if user[k] == nil then user[k] = v end
    end
    _G.TekkitConfig = user
end
local function Cfg(key, default)
    local t = _G.TekkitConfig or {}
    return (t[key] == nil) and default or t[key]
end
local function SetCfg(key, value)
    _G.TekkitConfig[key] = value
end

--=====================================================
-- ==================  HELPERS  =======================
--=====================================================
local function safeFind(root, pathArray)
    local cur = root
    for _, name in ipairs(pathArray) do
        cur = cur and cur:FindFirstChild(name)
        if not cur then return nil end
    end
    return cur
end

local function safeText(inst)
    if not inst then return "N/A" end
    local ok, txt = pcall(function() return inst.Text end)
    if ok and typeof(txt) == "string" and txt ~= "" then return txt end
    return "N/A"
end

local function getDamage()
    local ls = LocalPlayer:FindFirstChild("leaderstats")
    if not ls then return "N/A" end
    local stat = ls:FindFirstChild("Total Damage") or ls:FindFirstChild("Damage") or ls:FindFirstChild("TotalDamage")
    if not stat then return "N/A" end
    return tostring(stat.Value)
end

-- ‡∏´‡∏≤ container ‡∏Ç‡∏≠‡∏á Rewards (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Rewards.ItemsList / Rewards ‡∏ï‡∏£‡∏á ‡πÜ / ItemsList ‡πÉ‡∏ï‡πâ LeftSide)
local function findRewardsContainer(leftSide)
    if not leftSide then return nil end
    local rewards = leftSide:FindFirstChild("Rewards")
    if rewards then
        return rewards:FindFirstChild("ItemsList") or rewards
    end
    return leftSide:FindFirstChild("ItemsList")
end

-- ‡∏Ç‡πâ‡∏≤‡∏° layout/‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á
local IGNORE_NAME  = { UICorner = true, UIGridLayout = true, UIListLayout = true }
local IGNORE_CLASS = { UIGridLayout = true, UIListLayout = true }

-- ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ UICorner/UIGridLayout)
local function collectRewards(container)
    if not container then return "N/A" end
    local out = {}
    for _, child in ipairs(container:GetChildren()) do
        if not IGNORE_NAME[child.Name] and not IGNORE_CLASS[child.ClassName] then
            local label = child:IsA("TextLabel") and child or child:FindFirstChildWhichIsA("TextLabel", true)
            local nameText = (label and label.Text and label.Text ~= "") and label.Text or child.Name
            local amountObj = child:FindFirstChild("Amount") or child:FindFirstChild("Qty") or child:FindFirstChild("Count")
            local amountText = amountObj and (amountObj.Text or amountObj.Value)
            table.insert(out, amountText and (nameText .. " x" .. tostring(amountText)) or nameText)
        end
    end
    return (#out > 0) and table.concat(out, "\n") or "N/A"
end

local function isWinText(txt)
    txt = tostring(txt or ""):upper():match("^%s*(.-)%s*$")
    return txt == "~ WON" or txt:find("WON", 1, true) ~= nil
end

--=====================================================
-- =================  WEBHOOK LOGIC  ==================
--=====================================================
local WEBHOOK_URL = Cfg("Webhook URL", "")

local function sendWebhook()
    if WEBHOOK_URL == "" then
        warn("[Webhook] ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Webhook URL ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Webhooks ‡∏Å‡πà‡∏≠‡∏ô")
        return
    end

    local pg = LocalPlayer:FindFirstChild("PlayerGui")
    if not pg then return end
    local rewardsUI = pg:FindFirstChild("RewardsUI")
    if not rewardsUI then return end
    local leftSide = safeFind(rewardsUI, {"Main","LeftSide"})
    if not leftSide then return end

    local totalTime  = leftSide:FindFirstChild("TotalTime")
    local chapter    = leftSide:FindFirstChild("Chapter")
    local mode       = leftSide:FindFirstChild("Mode")
    local difficulty = leftSide:FindFirstChild("Difficulty")
    local world      = leftSide:FindFirstChild("World")
    local itemsCont  = findRewardsContainer(leftSide)

    local payload = {
        username = "RepintX",
        avatar_url = "https://cdn.discordapp.com/attachments/1412823986869637272/1415317557522595921/ChatGPT_Image_10_.._2568_19_15_59.png?ex=68c36d71&is=68c21bf1&hm=a2d31f80d9561c349ccbb8370ff7d24e0a82f2d0cb0539aa5dea8af321e19a89&",
        embeds = {{
            author = {
                name = "ùìêùì∑ùì≤ùì∂ùìÆ ùì°ùì™ùì∑ùì∞ùìªùìº ùìß",
                icon_url = "https://media.discordapp.net/attachments/1412823986869637272/1415631453253013575/1000.png?ex=68c3e907&is=68c29787&hm=5194ace4e402964aefd1136c17331ac774194fc14cd9e032f6d5e744961a1550&=&format=webp&quality=lossless"
            },
            title = " è·¥è·¥ú Ä ·¥°…™…¥",
            color = 5432368,
            thumbnail = {
                url = "https://cdn.discordapp.com/attachments/1412823986869637272/1415317557522595921/ChatGPT_Image_10_.._2568_19_15_59.png?ex=68c36d71&is=68c21bf1&hm=a2d31f80d9561c349ccbb8370ff7d24e0a82f2d0cb0539aa5dea8af321e19a89&"
            },
            image = {
                url = "https://cdn.discordapp.com/attachments/1413105342253895861/1415628308611076126/noFilter.png?ex=68c3e619&is=68c29499&hm=855bccc9c6d8ac2749d1a726191c82c38e2a6c1807fbec57b986f1afabf1a1a6&"
            },
            fields = {
                { name = "NAME",       value = LocalPlayer.Name,             inline = true },
                { name = "Damage",     value = getDamage(),                  inline = true },
                { name = "Time",       value = safeText(totalTime),          inline = true },
                { name = "Chapter",    value = safeText(chapter),            inline = true },
                { name = "Mode",       value = safeText(mode),               inline = true },
                { name = "Difficulty", value = safeText(difficulty),         inline = true },
                { name = "World",      value = safeText(world),              inline = true },
                { name = "Rewards",    value = collectRewards(itemsCont),    inline = false },
            }
        }}
    }

    local body = HttpService:JSONEncode(payload)
    local req = (http_request or request or (syn and syn.request) or (fluxus and fluxus.request))
    if req then
        req({ Url = WEBHOOK_URL, Method = "POST",
              Headers = { ["Content-Type"] = "application/json" }, Body = body })
    else
        pcall(function()
            HttpService:PostAsync(WEBHOOK_URL, body, Enum.HttpContentType.ApplicationJson)
        end)
    end
end

local function sendWebhookTest()
    if WEBHOOK_URL == "" then
        warn("[Webhook] ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Webhook URL ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Webhooks ‡∏Å‡πà‡∏≠‡∏ô")
        return
    end
    local payload = {
        username = "PeintX",
        avatar_url = "https://cdn.discordapp.com/attachments/1412823986869637272/1415317557522595921/ChatGPT_Image_10_.._2568_19_15_59.png?ex=68c36d71&is=68c21bf1&hm=a2d31f80d9561c349ccbb8370ff7d24e0a82f2d0cb0539aa5dea8af321e19a89&",
        embeds = {{
            color = 15733389,
            description = "```\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üü¢  \n```",
            image = {
                url = "https://media.discordapp.net/attachments/1413105342253895861/1415628308611076126/noFilter.png?ex=68c3e619&is=68c29499&hm=855bccc9c6d8ac2749d1a726191c82c38e2a6c1807fbec57b986f1afabf1a1a6&=&format=webp&quality=lossless"
            },
            author = {
                name = "Test",
                icon_url = "https://cdn.discordapp.com/attachments/1412823986869637272/1415631453253013575/1000.png?ex=68c3e907&is=68c29787&hm=5194ace4e402964aefd1136c17331ac774194fc14cd9e032f6d5e744961a1550&"
            }
        }}
    }
    local body = HttpService:JSONEncode(payload)
    local req = (http_request or request or (syn and syn.request) or (fluxus and fluxus.request))
    if req then
        req({ Url = WEBHOOK_URL, Method = "POST",
              Headers = { ["Content-Type"] = "application/json" }, Body = body })
    else
        pcall(function()
            HttpService:PostAsync(WEBHOOK_URL, body, Enum.HttpContentType.ApplicationJson)
        end)
    end
end

--=====================================================
-- ===================  TAB: AUTO  ====================
--=====================================================
local AutoTab = Window:Tab({Title = "Auto", Icon = "zap"})
AutoTab:Section({Title = "Core Automation"})

-- State for loops (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏° config)
local selectedSpeedTier = tonumber(Cfg("Speed Gamepass Tier", 1)) or 1
local run_AutoUpgrade   = Cfg("Auto Upgrade", false)
local run_AutoSpeed     = Cfg("Auto Use Speed", false)
local run_VoteStart     = Cfg("Auto Vote Start Game", false)

-- AutoPlay (toggle via same remote)
AutoTab:Toggle({
    Title = "AutoPlay",
    Desc = "‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÄ‡∏û‡∏•‡∏¢‡πå / ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î (‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß Toggle)",
    Value = Cfg("AutoPlay", false),
    Callback = function(state)
        SetCfg("AutoPlay", state)
        R_Units:WaitForChild("AutoPlay"):FireServer()
        print(state and "‚úÖ AutoPlay Enabled" or "‚ùå AutoPlay Disabled")
    end
})

-- Auto Upgrade Units
do
    local thread
    local function ensureThread()
        if run_AutoUpgrade and not thread then
            thread = task.spawn(function()
                local unitsFolder = LocalPlayer:WaitForChild("UnitsFolder")
                while run_AutoUpgrade do
                    for _, unit in ipairs(unitsFolder:GetChildren()) do
                        if typeof(unit) == "Instance" then
                            R_Units:WaitForChild("Upgrade"):FireServer(unit)
                            task.wait(0.1)
                        end
                    end
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    AutoTab:Toggle({
        Title = "Auto Upgrade Units",
        Desc  = "‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô UnitsFolder ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
        Value = run_AutoUpgrade,
        Callback = function(state)
            run_AutoUpgrade = state
            SetCfg("Auto Upgrade", state)
            ensureThread()
        end
    })
    ensureThread()
end

-- Speed tier dropdown + auto use
AutoTab:Dropdown({
    Title = "Speed Gamepass Tier",
    List  = {"1","2","3"},
    Value = tostring(selectedSpeedTier),
    Callback = function(choice)
        selectedSpeedTier = tonumber(choice) or 1
        SetCfg("Speed Gamepass Tier", selectedSpeedTier)
    end
})

do
    local thread
    local function ensureThread()
        if run_AutoSpeed and not thread then
            thread = task.spawn(function()
                while run_AutoSpeed do
                    Rmt:WaitForChild("SpeedGamepass"):FireServer(selectedSpeedTier)
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    AutoTab:Toggle({
        Title = "Auto Use Speed Gamepass",
        Desc  = "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Remote.SpeedGamepass(tier) ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥",
        Value = run_AutoSpeed,
        Callback = function(state)
            run_AutoSpeed = state
            SetCfg("Auto Use Speed", state)
            ensureThread()
        end
    })
    ensureThread()
end

-- Auto Vote Start
do
    local thread
    local function ensureThread()
        if run_VoteStart and not thread then
            thread = task.spawn(function()
                local VotePlaying = R_Voting:WaitForChild("VotePlaying")
                while run_VoteStart do
                    VotePlaying:FireServer()
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    AutoTab:Toggle({
        Title = "Auto Vote Start Game",
        Desc  = "‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏∏‡∏Å ‡πÜ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
        Value = run_VoteStart,
        Callback = function(state)
            run_VoteStart = state
            SetCfg("Auto Vote Start Game", state)
            ensureThread()
        end
    })
    ensureThread()
end

--=====================================================
-- ==============  TAB: SETTING MAP  ==================
--=====================================================
local SettingTab = Window:Tab({Title = "Setting Map", Icon = "map"})
SettingTab:Section({Title = "Vote Options"})

-- Auto Vote Next
do
    local run = Cfg("Auto Vote Next", false)
    local thread
    local function ensureThread()
        if run and not thread then
            thread = task.spawn(function()
                local VoteNext = R_Voting:WaitForChild("VoteNext")
                while run do
                    VoteNext:FireServer()
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    SettingTab:Toggle({
        Title = "Auto Vote Next",
        Desc  = "‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        Value = run,
        Callback = function(state)
            run = state
            SetCfg("Auto Vote Next", state)
            ensureThread()
        end
    })
    ensureThread()
end

-- Auto Replay
do
    local run = Cfg("Auto Replay", false)
    local thread
    local function ensureThread()
        if run and not thread then
            thread = task.spawn(function()
                local VoteRetry = R_Voting:WaitForChild("VoteRetry")
                while run do
                    VoteRetry:FireServer()
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    SettingTab:Toggle({
        Title = "Auto Replay",
        Desc  = "‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏°‡∏û‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        Value = run,
        Callback = function(state)
            run = state
            SetCfg("Auto Replay", state)
            ensureThread()
        end
    })
    ensureThread()
end

-- Auto Leave
do
    local run = Cfg("Auto Leave", false)
    local thread
    local function ensureThread()
        if run and not thread then
            thread = task.spawn(function()
                local VoteLeave = R_Voting:WaitForChild("VoteLeave")
                while run do
                    VoteLeave:FireServer()
                    task.wait(5)
                end
                thread = nil
            end)
        end
    end
    SettingTab:Toggle({
        Title = "Auto Leave",
        Desc  = "‡πÇ‡∏´‡∏ß‡∏ï‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        Value = run,
        Callback = function(state)
            run = state
            SetCfg("Auto Leave", state)
            ensureThread()
        end
    })
    ensureThread()
end

-- Player Only (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚Üí Rejoin)
SettingTab:Section({Title = "Server Control"})
do
    local run = Cfg("Player Only", false)
    local thread
    local function ensureThread()
        if run and not thread then
            thread = task.spawn(function()
                while run do
                    if #Players:GetPlayers() > 1 then
                        warn("üë• ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‚Üí Rejoining...")
                        task.wait(1)
                        TeleportService:Teleport(game.PlaceId, LocalPlayer)
                        break
                    end
                    task.wait(3)
                end
                thread = nil
            end)
        end
    end
    SettingTab:Toggle({
        Title = "Player Only",
        Desc  = "‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‚Äî‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏à‡∏∞ Rejoin ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà",
        Value = run,
        Callback = function(state)
            run = state
            SetCfg("Player Only", state)
            ensureThread()
        end
    })
    ensureThread()
end

--=====================================================
-- =================  TAB: WEBHOOKS  ==================
--=====================================================
local WebTab = Window:Tab({Title = "Webhooks", Icon = "link"})
WebTab:Section({Title = "Discord Webhooks"})

WebTab:Textbox({
    Title = "Webhook URL",
    Desc = "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå Discord Webhook ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    Placeholder = "https://discord.com/api/webhooks/...",
    Value = WEBHOOK_URL,
    ClearTextOnFocus = false,
    Callback = function(text)
        WEBHOOK_URL = text or ""
        SetCfg("Webhook URL", WEBHOOK_URL)
        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL:", WEBHOOK_URL)
    end
})

WebTab:Button({
    Title = "Test Send Webhook",
    Desc = "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord",
    Callback = function()
        sendWebhookTest()
    end
})

do
    local enabled = false
    local thread
    local function ensureThread()
        if enabled and not thread then
            thread = task.spawn(function()
                while enabled do
                    local pg = Players.LocalPlayer:WaitForChild("PlayerGui")
                    local rewardsUI = pg:WaitForChild("RewardsUI", 180)
                    if not (enabled and rewardsUI) then
                        task.wait(1)
                        continue
                    end
                    local leftSide   = safeFind(rewardsUI, {"Main","LeftSide"})
                    local gameStatus = leftSide and leftSide:FindFirstChild("GameStatus") or nil
                    if not gameStatus then
                        rewardsUI.AncestryChanged:Wait()
                        continue
                    end
                    local sentForThisRound = false
                    local function checkWin()
                        if enabled and not sentForThisRound and isWinText(gameStatus.Text) then
                            sentForThisRound = true
                            sendWebhook()
                        end
                    end
                    checkWin()
                    local conn = gameStatus:GetPropertyChangedSignal("Text"):Connect(checkWin)
                    rewardsUI.AncestryChanged:Wait()
                    if conn then conn:Disconnect() end
                end
                thread = nil
            end)
        end
    end

    WebTab:Toggle({
        Title = "Auto Webhook on WIN (~ WON)",
        Desc  = "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏£‡∏≠‡∏ö",
        Value = false,
        Callback = function(state)
            enabled = state
            ensureThread()
        end
    })
end

--=====================================================
-- ===================  TAB: LOBBY  ===================
--=====================================================
local LobbyTab = Window:Tab({ Title = "Lobby", Icon = "home" })

local Remote = RS:WaitForChild("Remote")
local RemoteServer = Remote:WaitForChild("Server")

local function safeFire(desc, fn)
    local ok, err = pcall(fn)
    if ok then
        print("‚úÖ "..desc.." ‚Äî success")
    else
        warn("‚ùå "..desc.." ‚Äî failed:", err)
    end
end

LobbyTab:Section({ Title = "Quest & Battle Pass" })

LobbyTab:Button({
    Title = "Claim All Daily Quests (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)",
    Desc  = "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (DailyQuest) ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°",
    Callback = function()
        local playerData = RS:WaitForChild("Player_Data")
        local myData = playerData:FindFirstChild(LocalPlayer.Name)
        if not myData then
            warn("[ClaimQuest] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô ReplicatedStorage/Player_Data")
            return
        end
        local dailyQuest = myData:FindFirstChild("DailyQuest")
        if not dailyQuest then
            warn("[ClaimQuest] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå DailyQuest")
            return
        end

        local questEvent = RemoteServer:WaitForChild("Gameplay"):WaitForChild("QuestEvent")

        safeFire("QuestEvent('ClaimAll')", function()
            questEvent:FireServer("ClaimAll")
        end)

        for _, q in ipairs(dailyQuest:GetChildren()) do
            safeFire(("QuestEvent('ClaimAll', %s)"):format(q.Name), function()
                questEvent:FireServer("ClaimAll", q)
            end)
            task.wait(0.05)
        end
    end
})

LobbyTab:Button({
    Title = "Claim All Battle Pass (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)",
    Desc  = "‡πÄ‡∏Ñ‡∏•‡∏° Battle Pass ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    Callback = function()
        local claimBp = RS:WaitForChild("Remote"):WaitForChild("Events"):WaitForChild("ClaimBp")
        safeFire("ClaimBp('Claim All')", function()
            claimBp:FireServer("Claim All")
        end)
    end
})

LobbyTab:Section({ Title = "Redeem Codes" })

local BUILTIN_CODES = {
    "CyclopsSoulMine!","CelestialMageOp67","FairyPatch67","FairyTalePeak!","6.5UpdateIsReal!!!",
    "FallPart2!?!","Sorry4Delay","ReallySorry4Delay","FollowUpTheInsta!","FixPatchSJW!",
    "SorryForPassiveDelay!","SoloPeakLeveling!","NewRaidAndEvos?!","IgrisIsMetaAgain!!",
    "SorryForAllTheIssues!","TYFORTHESUPPORT!?","FallEvent?!","SorryForLate!","NewRangerUnit!",
    "PityOnRanger?!","NewCode!?","BerserkUpdate?!","SorryForLate!","NewDivineTrials!",
    "UpgradeInFieldFix!","Shutdown2!","DBZUpdate!","NewPortals?!","GTBossEvent!!",
    "SorryForDelayz!","LBreset!","MinorChanges!","Dungeons!","SAOUpd!","RiftMode!",
    "EzSoulFrags","CraftingFix!","SmartRejoin","S3Battlepass!","StatBoosters!",
    "GraveyardRaid!","ChainsawUpd!","SneakCode!","3xALLMODES!!","YOUTUBEBACK!!",
    "BRANDONTHEBEST!","TYBW2!","QOL2!","ARXBLEACH!","Srry4Shutdown","SmallFixs",
    "!FixBossRushShop","!TYBW","!MattLovesARX2","!RaitoLovesARX","!BrandonTheBest",
    "Sorry4AutoTraitRoll","Sorry4EvoUnits","SorryDelay!!!","SummerEvent!","2xWeekEnd!",
    "Sorry4Quest","SorryRaids","BOSSTAKEOVER","RAIDS","BizzareUpdate2!","Sorry4Delays",
    "JoJo Part 1","NewLobby","Instant Trait","HBDTanny","PortalsFix","UPDATE 1.5",
    "THANKYOU4PATIENCE",
}
LobbyTab:Button({
    Title = "Redeem All (Built-in List)",
    Desc  = "‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ (‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î)",
    Callback = function()
        local codeRemote = RemoteServer:WaitForChild("Lobby"):WaitForChild("Code")

        local seen, codes = {}, {}
        for _, c in ipairs(BUILTIN_CODES) do
            local s = tostring(c or ""):gsub("^%s+",""):gsub("%s+$","")
            if s ~= "" and not seen[s] then
                seen[s] = true
                table.insert(codes, s)
            end
        end

        for _, code in ipairs(codes) do
            safeFire(("Lobby.Code('%s')"):format(code), function()
                codeRemote:FireServer(code)
            end)
            task.wait(0.35)
        end
        print(("‚úÖ Redeem All ‚Äî done (%d codes)"):format(#codes))
    end
})
